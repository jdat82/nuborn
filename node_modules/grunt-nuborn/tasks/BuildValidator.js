// allow inheritance
require("./inheritance");

// load grunt API
var grunt = require("grunt");

// load path API
var nodePath = require("path");

// system path separator
var sep = nodePath.sep;

// scopes constants
var scopes = require("./Constants").scopes;

// resources builder
var ResourceBuilder = require("./ResourceBuilder");

// html builder
var HtmlBuilder = require("./HtmlBuilder");


/**
* @class BuildValidator
* Its job is to process the input parameters of the build and choose the right actions to follow.
*/
var BuildValidator = Object.subClass({

	/**
	* @param nuborn configuration of nuborn plugin in gruntfile.
	*/
	process: function(nuborn)
	{
		// if no target is provided, stop process
		if (!nuborn.data.targets) {
			grunt.log.writeln("There is not any target");
			return true;
		}

		// if all targets are deactivated
		for(var key in nuborn.data.targets) {
			if(nuborn.data.targets[key]){
				break;
			}
			grunt.log.writeln("There is no active target");
			return true;	
		}

		/*
		* Extension specify 4 families of code : js, css, html, templates.
		* Each of them require a specific build.
		* Scope is orthogonal to extension with 3 type : app, libs and resources.
		* Generally we don't want to rebuild the entire app every time we save a file.
		* With scope, you can rebuild only app code, libs code or static resources.
		* There is a little sublime build in nuborn which provide the current file extension and path
		* at saved time and launch automatically the right build.
		*
		* If no extension nor scope is provided, the entire app is rebuild.
		*/

		// current file extension
		var extension = grunt.option("extension");

		// current scope
		var scope = scopes[grunt.option("scope")] || 'all';

		var resourceBuilder = new ResourceBuilder();
		var htmlBuilder = new HtmlBuilder();

		// choosing what to build
		switch (extension) 
		{
			// hogan templates are converted to javascript and encapsulated in app js code.
			case "js":
			case "hogan":
				if (this.data.templates && this.data.templates[scope]) {
					launchTemplatesBuild(this.data.targets, this.data.templates[scope], scope);
				}
				if (this.data.javascript && this.data.javascript[scope]) {
					launchJavascriptBuild(this.data.targets, this.data.javascript[scope], scope);
					grunt.task.run("nuborn-delete:src" + sep + "nuborn-hogan.js");
				} else {
					grunt.log.writeln("Javascript " + scope + " configuration is missing");
				}
				break;

			case "scss":
				if (this.data.css && this.data.css[scope]) {
					launchCSSBuild(this.data.targets, this.data.css[scope], scope);
				} else {
					grunt.log.writeln("CSS " + scope + " configuration is missing");
				}
				break;

			case "html":
				htmlBuilder.process(this.data.targets, this.data.html, scope);
				break;

			default:
				grunt.log.writeln("no extension provided");
				break;
		}

		// choosing what to build
		switch(scope) 
		{
			/** Copying static resources in each target folder */
			case scopes.all:
			case scopes.res:
				resourceBuilder.process(this.data.targets, this.data.resources.fileset);
				break;
			default:
				grunt.log.writeln("no scope provided");
				break;
		}
	}

});

module.exports = BuildValidator;