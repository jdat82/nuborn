// allow inheritance
require("./inheritance");
// load grunt API
var grunt = require("grunt");
// load path API
var nodePath = require("path");
// system path separator
var sep = nodePath.sep;

/**
* Template for grunt-contrib-copy configuration.
* Will be filled with values later dynamically.
*/
var copy = {
	main: {
		files: []
	}
};

/**
* @class ResourceBuilder
* It's job is to process the "resources" configuration part.
*/
var ResourceBuilder = Object.subClass(
{
	/**
	* Copy static resources which match the fileset patterns to defined output.
	* @param targets the list of targets (android/ios/web...) 
	* @param fileset fileset configuration in gruntfile
	*/
	process: function(targets, fileset) 
	{
		if (!fileset) { 
			return;
		}

		grunt.log.writeln("copying static resources...");

		var filesToCopy = copy.main.files;

		// for each entry in the fileset
		fileset.forEach(function(node, index, array) 
		{
			// grunt.config.requires("nuborn.classic.resources.fileset.patterns");
			if (!node.patterns) {
				return;
			}

			// grunt.log.writeln("on node: " + JSON.stringify(node));

			// for each pattern
			for (var key in targets) 
			{
				// grunt.log.writeln("on target: " + key);
				if (targets[key] && node[key]) 
				{
					filesToCopy.push({
						expand: true,
						flatten: true,
						src: node.patterns,
						dest: "build" + sep + key + sep + node[key].output
					});
				}
			}
		}, this);

		// let's add some configuration for grunt-contrib-copy plugin
		grunt.config("copy", copy);

		// run it
		grunt.task.run("copy");

		grunt.log.writeln("DONE");
	}
});

module.exports = ResourceBuilder;