// allow inheritance
require("../common/inheritance");

// load grunt API
var grunt = require("grunt");

// load path API
var nodePath = require("path");

// system path separator
var sep = nodePath.sep;

// scopes constants
var scopes = require("../common/Constants").scopes;

var Util = require("../common/Util");

/**
* @class CssProcessor
* It's job is to process the "css" configuration part.
*/
var CssProcessor = Object.subClass(
{
    /**
    * Generate CSS files from SCSS parts and optimize them.
    * @param targets the list of targets (android/ios/web...) 
    * @param configuration css configuration part in gruntfile
    * @param scope current build scope
    */
    process: function(targets, configuration, scope)
    {
        grunt.log.writeln("css processing with scope " + scope);

        if(!configuration) {
            grunt.log.writeln("css[" + scope + "] configuration is missing");
        }

        // get references to possible targets 
        var android = targets.android;
        var ios = targets.ios;
        var web = targets.web;

        // if the build concerns the libs and it is asked to rebuild nuborn
        if (scope === scope.libs && configuration.buildNubornFirst) {
            // build nuborn
            this.buildNubornCSS();
        }
        
        // get grunt config
        var config = grunt.config.data;
        // get the existing sass config, or a new one 
        config.sass = config.sass || {};
        // get a reference to the configuration of sass
        var sass = config.sass;
        // create and initialize the default target
        var target = {};
        // Create array of Sass Targets
        var nubornSassTargets = [];
        // define a default sass configuration
        var defaultConfiguration = {
            style: "compressed",
            noCache: true
        };
        // create the target options
        target.options = Util.jQueryExtend(true, {}, defaultConfiguration, configuration.options);

        // Check if a separate build is needed
        var separate = false;
        if (android) {
            separate = separate || this.needsSeparateBuilds(configuration.android);
        }
        if (ios) {
            separate = separate || this.needsSeparateBuilds(configuration.ios);
        }
        if (web) {
            separate = separate || this.needsSeparateBuilds(configuration.web);
        }

        // sets the output file name
        var output = configuration.output ? configuration.output : "output.min.css";

        // if separate builds are needed
        if (separate) {
            // build all separately
            if (android) {
                sass["nuborn-android"] = this.buildSassTarget("android", target, output, configuration);
                nubornSassTargets.push("sass:nuborn-android");
            }
            if (ios) {
                sass["nuborn-ios"] = this.buildSassTarget("ios", target, output, configuration);
                nubornSassTargets.push("sass:nuborn-ios");
            }
            if (web) {
                sass["nuborn-web"] = this.buildSassTarget("web", target, output, configuration);
                nubornSassTargets.push("sass:nuborn-web");
            }
        } else {
            // get the timestamp to avoid potential conflicts
            var suffix = new Date().getTime();
            // create the temp folder
            grunt.file.mkdir("build" + sep + "sass" + suffix);
            // build one and copy
            sass["nuborn-target"] = this.buildSassTarget("sass" + suffix, target, output, configuration);
            nubornSassTargets.push("sass:nuborn-target");
        }

        /**
         * RUN SASS TASKS
         */
        grunt.task.run(nubornSassTargets);

        /**
         * COPY FILES IF NOT SEPARATE
         */
        if (!separate) {
            if (android) {
                var androidOutput = configuration.android && configuration.android.output ? configuration.android.output : output;
                grunt.task.run("nuborn-copy:build" + sep + "sass" + suffix + sep + output + ":build" + sep + "android" + sep + androidOutput);
            }
            if (ios) {
                var iosOutput = configuration.ios && configuration.ios.output ? configuration.ios.output : output;
                grunt.task.run("nuborn-copy:build" + sep + "sass" + suffix + sep + output + ":build" + sep + "ios" + sep + iosOutput);
            }
            if (web) {
                var webOutput = configuration.web && configuration.web.output ? configuration.web.output : output;
                grunt.task.run("nuborn-copy:build" + sep + "sass" + suffix + sep + output + ":build" + sep + "web" + sep + webOutput);
            }

            grunt.task.run("nuborn-delete:build" + sep + "sass" + suffix);
        }

    },

    /**
     * Build only scss/css files from nuborn.
     */
    buildNubornCSS: function()
    {
        // get grunt configuration
        var config = grunt.config.data;
        // get existing sass configuration or a new one
        config.sass = config.sass || {};
        // set a reference to the sass configuration
        var sass = config.sass;
        // create a new target for sass
        var nuborn = {};
        sass["nuborn-nuborn"] = nuborn;
        // files to build with sass
        var output = "libs" + sep + "Nuborn" + sep + "nuborn.css";
        nuborn.files = {
            output: [
                    "libs" + sep + "Nuborn" + sep + "sass" + sep + "mixins.scss",
                    "libs" + sep + "Nuborn" + sep + "sass" + sep + "classes.scss",
                    "libs" + sep + "Nuborn" + sep + "**" + sep + "*.scss"
            ]
        };
        // set sass options
        nuborn.options = {
            style: "compressed",
            noCache: true
        };
        // run the task
        grunt.task.run("sass:nuborn-nuborn");
    },

    buildSassTarget: function(targetName, parent, output, configuration)
    {
        // Clone the parent target
        var target = Util.jQueryExtend(true, {}, parent);
        // initialize target sources with the common one or a new one
        var targetSources = [].concat(configuration.patterns ? configuration.patterns : []);
        var targetOutput = "build" + sep + targetName + sep + output;
        // treat target specific configuration
        if (configuration[targetName]) {
            // get the configuration for the current target
            var targetConfiguration = configuration[targetName];
            // extends options with target's options
            Util.jQueryExtend(true, target.options, targetConfiguration.options);

            // treat target specific output file
            if (targetConfiguration.output) {
                targetOutput = "build" + sep + targetName + sep + targetConfiguration.output;
            }

            // add the target sources to the initial sources
            if (targetConfiguration.patterns) {
                targetSources = targetSources.concat(targetConfiguration.patterns);
            }
        }

        // set the files property of sass with target sources
        target.files = {};
        target.files[targetOutput] = targetSources;
        // return the target
        return target;
    },

    needsSeparateBuilds: function(target) 
    {
        // if the target is not specified, no need to build it separately
        if (!target) {
            return false;
        }
        // if options is specified AND is not empty, needs a separate build
        if (target.options && Object.keys(target.options).length) {
            return true;
        }
        // if patterns is specified AND is not empty, needs a separate build
        if (target.patterns && Object.keys(target.patterns).length) {
            return true;
        }
        // otherwise do not need a separate build
        return false;
    },
});

module.exports = CssProcessor;
