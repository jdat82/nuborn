// allow inheritance
require("../common/inheritance");

// load grunt API
var grunt = require("grunt");

// load path API
var nodePath = require("path");

// system path separator
var sep = nodePath.sep;

// scopes constants
var scopes = require("../common/Constants").scopes;

// utility methods
var Util = require("../common/Util");

/**
* @class HtmlProcessor
* It's job is to process the "html" configuration part.
*/
var HtmlProcessor = Object.subClass(
{
	/**
	* Copy and optimize html files.
	* @param targets the list of targets (android/ios/web...) 
	* @param configuration html configuration part in gruntfile
	* @param scope current build scope
	*/
	process: function(targets, configuration, scope) 
	{
		if(!configuration) {
			grunt.log.writeln("html[" + scope + "] configuration is missing");
		}

		// get references to possible targets 
		var android = targets.android;
		var ios = targets.ios;
		var web = targets.web;

		var androidConfiguration = configuration.android || {};
		var iosConfiguration = configuration.ios || {};
		var webConfiguration = configuration.web || {};

		// default output if empty string (target project root)
		var output = "";
		// if an output is specified, use it
		if (configuration.output) {
			var out = configuration.output;
			if (nodePath.isFile(out)) {
				out = nodePath.dirname(out);
			}
			output = Util.addSeparatorToPath(out);
		}
		// create ouputs for all targets
		var androidOutput = "build" + sep + "android" + sep + (androidConfiguration.output ? Util.addSeparatorToPath(androidConfiguration.output) : output);
		var iosOutput = "build" + sep + "ios" + sep + (iosConfiguration.output ? Util.addSeparatorToPath(iosConfiguration.output) : output);
		var webOutput = "build" + sep + "web" + sep + (webConfiguration.output ? Util.addSeparatorToPath(webConfiguration.output) : output);

		if (!configuration.patterns.length) {
			grunt.log.writeln("Missing configuration.patterns directive.");
			return false;
		}
		// list all files into patterns directive and copy them to targets
		var array = grunt.file.expand(configuration.patterns);
		for (var i = 0, length = array.length; i < length; i++)
		{
			var file = array[i];
			var filename = nodePath.basename(file);
			android && grunt.file.copy(file, androidOutput + filename);
			ios && grunt.file.copy(file, iosOutput + filename);
			web && grunt.file.copy(file, webOutput + filename);
		}
	}
	
});

module.exports = HtmlProcessor;