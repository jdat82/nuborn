// allow inheritance
require("../common/inheritance");

// load grunt API
var grunt = require("grunt");

// load path API
var nodePath = require("path");

// system path separator
var sep = nodePath.sep;

// scopes constants
var scopes = require("../common/Constants").scopes;

// extensions constants
var extensions = require("../common/Constants").extensions;

// resources builder
var ResourceProcessor = require("../processor/ResourceProcessor");

// html builder
var HtmlProcessor = require("../processor/HtmlProcessor");

// css builder
var CssProcessor = require("../processor/CssProcessor");

// template processor
var TemplateProcessor = require("../processor/TemplateProcessor");

// javascript processor
var JavascriptProcessor = require("../processor/JavascriptProcessor");

// utility methods
var Util = require("../common/Util");


/**
* @class BuildValidator
* Its job is to process the input parameters of the build and choose the right actions to follow.
*/
var BuildValidator = Object.subClass({

	/**
	* @param config configuration of nuborn plugin in gruntfile.
	*/
	process: function(config)
	{
		// grunt.log.writeln("config.data: " + JSON.stringify(config.data));

		// if no target is provided, stop process
		if (!config.data.targets) {
			grunt.log.writeln("There is not any target");
			return true;
		}

		// if all targets are deactivated
		var noActiveTarget = true;
		for(var key in config.data.targets) {
			if(config.data.targets[key]){
				noActiveTarget = false;
				break;
			}
		}
		if(noActiveTarget) {
			grunt.log.writeln("There is no active target");
			return true;	
		}

		/*
		* Extension specify 4 families of code : js, css, html, templates.
		* Each of them require a specific build.
		* Scope is orthogonal to extension with 3 type : app, libs and resources.
		* Generally we don't want to rebuild the entire app every time we save a file.
		* With scope, you can rebuild only app code, libs code or static resources.
		* There is a little sublime build in nuborn which provide the current file extension and path
		* at saved time and launch automatically the right build.
		*
		* If no extension nor scope is provided, the entire app is rebuild.
		*/

		// current file extension
		var extension = extensions[grunt.option("extension")] || extensions.all;
		grunt.log.writeln("current extension: " + extension);

		// current scope
		var scope = scopes[grunt.option("scope")] || scopes.all;
		grunt.log.writeln("current scope: " + scope);

		// creating individual builders
		var resources = new ResourceProcessor();
		var html = new HtmlProcessor();
		var css = new CssProcessor();
		var templates = new TemplateProcessor();
		var javascript = new JavascriptProcessor();

		// choosing what to build
		switch (extension) 
		{
			// hogan templates are converted to javascript and encapsulated in app js code.
			case extensions.js:
			case extensions.hogan:
			case extensions.all: 
				grunt.log.writeln("Building javascript and templates files");
				if (config.data.templates) {
					if(scope === scopes.all) {
						templates.process(config.data.targets, config.data.templates[scopes.libs], scope);
						templates.process(config.data.targets, config.data.templates[scopes.app], scope);
					} else {
						templates.process(config.data.targets, config.data.templates[scope], scope);
					}
				}
				if (config.data.javascript) {
					if(scope === scopes.all) {
						javascript.process(config.data.targets, config.data.javascript[scopes.libs], scope);
						javascript.process(config.data.targets, config.data.javascript[scopes.app], scope);
					} else {
						javascript.process(config.data.targets, config.data.javascript[scope], scope);
					}
					// WHAT THE FUCK IS THIS ?
					// grunt.task.run("nuborn-delete:src" + sep + "nuborn-hogan.js");
				} else {
					grunt.log.writeln("Javascript configuration is missing");
				}
				break;

			case extensions.scss:
			case extensions.all:
				grunt.log.writeln("Building css files");
				if (config.data.css) {
					if(scope === scopes.all) {
						css.process(config.data.targets, config.data.css[scopes.libs], scope);
						css.process(config.data.targets, config.data.css[scopes.app], scope);
					} else {
						css.process(config.data.targets, config.data.css[scope], scope);
					}
				} else {
					grunt.log.writeln("CSS configuration is missing");
				}
				break;

			case extensions.html:
			case extensions.all:
				grunt.log.writeln("Building html files");
				if (config.data.html) {
					if(scope === scopes.all) {
						html.process(config.data.targets, config.data.html[scopes.libs], scope);
						html.process(config.data.targets, config.data.html[scopes.app], scope);
					} else {
						html.process(config.data.targets, config.data.html[scope], scope);
					}
				} else {
					grunt.log.writeln("HTML configuration is missing");
				}
				break;

			case extensions.all:
				grunt.log.writeln("Building static resources");
				resources.process(config.data.targets, config.data.resources.fileset);
				break;
		}
	}

});

module.exports = BuildValidator;