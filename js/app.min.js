$.it = $.it || {};
$.app = $.app || {};
var Status = Object.subClass({init:function(code, message, args, error) {
  this.code = code;
  this.message = message;
  this.args = args;
  this.error = error
}});
var GenericStatus = {OK:0, NOK:1};
var ErrorHelper = Object.subClass({showConnectivityError:function() {
  var message = $.it.wordings.msg("connectivity-error");
  var callback = null;
  var title = $.it.wordings.msg("connectivity-error-header");
  $.it.toolbox.alert(message, callback, title)
}, showInitFatalError:function() {
  var message = $.it.wordings.msg("init-fatal-error");
  var callback = null;
  var title = $.it.wordings.msg("error");
  $.it.toolbox.alert(message, callback, title)
}, showTechnicalError:function() {
  var message = $.it.wordings.msg("technical-error");
  var callback = null;
  var title = $.it.wordings.msg("technical-error-header");
  $.it.toolbox.alert(message, callback, title)
}, showTimeoutSessionError:function(callback) {
  var message = $.it.wordings.msg("timeout-session-error");
  var title = $.it.wordings.msg("timeout-session-error-header");
  $.it.toolbox.alert(message, callback, title)
}});
$.it.error = new ErrorHelper;
function Toolbox() {
  this.settings = {"templates-folder":"templates/"}
}
$.it.toolbox = new Toolbox;
Toolbox.prototype.fillParams = function(string, params) {
  if(!params || params.length <= 0) {
    return string
  }
  var regex = new RegExp("\\{[0-9]\\}");
  if(!(params instanceof Array)) {
    params = [params]
  }
  for(var paramsIndex = 0;paramsIndex < params.length;paramsIndex++) {
    var m = regex.exec(string);
    if(m === null) {
      return string
    }else {
      for(i = 0;i < m.length;i++) {
        string = string.replace(m[i], params[paramsIndex])
      }
    }
  }
  return string
};
Toolbox.prototype.updateSettings = function(settings) {
  this.settings = $.extend(true, {}, this.settings, settings);
  return this.settings
};
Toolbox.prototype.getTemplate = function(url, format, updateWording) {
  var template = "";
  $.ajax({url:"templates/" + url, type:"GET", dataType:"html", async:false, success:function(data) {
    template = data
  }});
  if(!format || format === "string") {
    return template
  }
  var el;
  if(format === "html") {
    el = $(template)
  }
  if(updateWording && el) {
    $.it.wordings.update(el)
  }
  return el
};
Toolbox.prototype.getUrlParams = function(query) {
  var result = {}, nvPairs = (query || "").replace(/^\?/, "").split(/&/), i, pair, n, v;
  for(i = 0;i < nvPairs.length;i++) {
    var pstr = nvPairs[i];
    if(pstr) {
      pair = pstr.split(/=/);
      n = pair[0];
      v = pair[1];
      if(result[n] === undefined) {
        result[n] = v
      }else {
        if(typeof result[n] !== "object") {
          result[n] = [result[n]]
        }
        result[n].push(v)
      }
    }
  }
  return result
};
Toolbox.prototype.isCordova = function() {
  return window.cordova
};
Toolbox.prototype.networkAvailable = function() {
  if($.it.toolbox.isCordova()) {
    return navigator.connection.type !== Connection.NONE
  }else {
    return navigator.onLine
  }
};
Toolbox.prototype.isInitialized = function() {
  return $.it.context.appStatus && $.it.context.appStatus.code === $.app.status.INITIALIZED
};
Toolbox.prototype.isAndroid = function() {
  if(window.device && window.device.platform) {
    return window.device.platform === "Android"
  }
  return false
};
Toolbox.prototype.isOldAndroid = function() {
  return this.isAndroid() && parseInt(window.device.version, 10) < 4
};
var delay = function() {
  var timer = 0;
  return function(callback, ms) {
    clearTimeout(timer);
    timer = setTimeout(callback, ms)
  }
}();
Toolbox.prototype.createPhonegapMock = function() {
  Connection = {"WIFI":"WIFI"};
  navigator.network = {"connection":{"type":Connection.WIFI}};
  navigator.notification = {alert:function(message, callback, titre) {
    console.log("bouchon phonegap navigator.notification.alert");
    alert(message)
  }, confirm:function(message, callback, titre, buttons) {
    console.log("bouchon phonegap navigator.notification.confirm");
    callback(2)
  }};
  navigator.splashscreen = {hide:function() {
    console.log("Hide Splashscreen")
  }};
  $.it.context.phonegapMock = true
};
Toolbox.prototype.addDebugInfos = function() {
  $("body").prepend('<div class="debug-info"></div>');
  if($.it.context.phonegapMock) {
    $(".debug-info").append('<span class="green">mock phonegap</span>')
  }
  if(window.modjewel) {
    $(".debug-info").append('<span class="green">weinre</span>')
  }
  $(".debug-info").append('<span class="green developer">' + $.it.urls.network.name + "</span>")
};
Toolbox.prototype.openExternalPage = function(url) {
  window.open(url, "_blank")
};
if(!Array.prototype.forEach) {
  Array.prototype.forEach = function(callback, context) {
    for(var i = 0;i < this.length;i++) {
      callback.call(context || null, this[i], i, this)
    }
  }
}
Toolbox.prototype.clone = function(obj) {
  return JSON.parse(JSON.stringify(obj))
};
Toolbox.prototype.useFullHeight = function(elm, forceMaxHeight) {
  elm = $(elm);
  var elmTopEdge = elm.offset().top;
  var windowBottomEdge = window.innerHeight;
  var height = windowBottomEdge - elmTopEdge;
  elm.height(height);
  if(forceMaxHeight) {
    elm.css("max-height", height)
  }
};
Toolbox.prototype.handleTargetBlankUrls = function() {
  $(document).on("click", "[target=_blank], [target=_new]", function() {
    var href = $(this).attr("href");
    if(href) {
      console.log("openExternalPage: " + href);
      $.it.toolbox.openExternalPage(href);
      return false
    }
    return true
  })
};
Toolbox.prototype.getCurrentLocale = function(defaultLocale) {
  var locale;
  var dfd = $.Deferred();
  if(defaultLocale) {
    locale = defaultLocale
  }
  if($.it.toolbox.isCordova()) {
    var onSuccess = function(loc) {
      locale = loc.value;
      console.log("current locale is: " + JSON.stringify(locale));
      dfd.resolveWith(locale)
    };
    var onFail = function() {
      console.log("current locale is: " + JSON.stringify(locale));
      dfd.rejectWith(locale)
    };
    navigator.globalization.getLocaleName(onSuccess, onFail)
  }else {
    if(navigator.language) {
      locale = navigator.language;
      console.log("current locale is: " + JSON.stringify(locale));
      dfd.resolveWith(locale)
    }else {
      console.log("current locale is: " + JSON.stringify(locale));
      dfd.rejectWith(locale)
    }
  }
  return dfd.promise()
};
Toolbox.prototype.alert = function(message, callback, title, buttonName) {
  if(this.isCordova()) {
    navigator.notification.alert(message, callback, title, buttonName);
    navigator.notification.vibrate()
  }else {
    alert(message);
    if(callback) {
      callback()
    }
  }
};
Toolbox.prototype.sequentialId = function(baseId) {
  if(!this.sequence) {
    this.sequence = 0
  }
  if(!baseId) {
    baseId = "sequence"
  }
  return baseId + "-" + this.sequence++
};
var Wordings = Object.subClass({init:function() {
  this.defaultLabels = {"back-button":"Back", "mandatory-arguments":"Mandatory argument(s) missing: {0}", "geolocation-api-missing":"no geolocation API", "quit-application":"Do you want to quit application ?", "config-load-error":"Failed to load configuration: {0}", "config-load-invalid":"Failed to load configuration: url <config-load> not found", "wordings-load-error":"Failed to load wordings: {0}", "wordings-load-invalid":"Failed to load wordings: url <wording-load> not found", "loading":"Loading...", 
  "cancel-loading":"tap to cancel", "geolocation-permission-denied":"Geolocation was forbidden", "geolocation-position-unavailable":"Geolocation unavailable", "connectivity-error":"Network unavailable. Please check your connectivity and try later.", "connectivity-error-header":"Network error", "init-fatal-error":"Application failed to initialize. Please check your connectivity and try later.", "Error":"Error", "customer":"ALD Automotive", "menu-title":"Menu"};
  this.labels = $.it.toolbox.clone(this.defaultLabels)
}, update:function(element) {
  var self = this;
  var id = element.id ? element.id : "'no id'";
  console.log("updating wordings of : " + id);
  var updateElement = function(index, element) {
    element = $(element);
    var key = element.attr("data-wording-key");
    var attribute = element.attr("data-wording-attribute");
    if(attribute) {
      element.attr(attribute, self.msg(key))
    }else {
      element.append(self.msg(key))
    }
  };
  $(element).find("[data-wording-key]").each(updateElement)
}, get:function(key) {
  return this.labels[key]
}, msg:function(key, params) {
  return $.it.toolbox.fillParams(this.labels[key], params)
}, extend:function(newLabels) {
  if(!newLabels) {
    return
  }
  this.labels = $.extend(true, {}, this.labels, newLabels)
}, load:function(params) {
  var url = $.it.urls.get("wording-load");
  if(params) {
    url = $.it.toolbox.fillParams(url, [params])
  }
  var dfd = $.Deferred();
  if(url) {
    var self = this;
    $.it.ajax.call({url:url, connectivityError:false, type:"GET", async:false, isCancelable:false, successCallback:function(data, textStatus, xhr) {
      self.extend(data);
      dfd.resolve()
    }, errorCallback:function(data, xhr, textStatus, errorThrown) {
      var error = new Status(xhr.status, $.it.wordings.msg("wordings-load-error", [textStatus]));
      dfd.rejectWith(error)
    }})
  }else {
    var error = new Status(404, $.it.wordings.msg("wordings-load-invalid"));
    dfd.rejectWith(error)
  }
  return dfd.promise()
}});
$.it.wordings = new Wordings;
function ResponsiveImages() {
}
$.it.rimages = new ResponsiveImages;
ResponsiveImages.prototype.update = function(element) {
  var ratio = 1;
  if(window.devicePixelRatio !== undefined) {
    ratio = window.devicePixelRatio
  }
  var scale = ratio > 1 ? "2x" : "1x";
  $(element).find("img").each(function() {
    var el = $(this);
    el.attr("src", $(this).data(scale));
    el.removeAttr("data-1x");
    el.removeAttr("data-2x")
  })
};
var Loader = Object.subClass({init:function(settings) {
  this.settings = this.settings || {};
  this.settings = $.extend(true, this.settings, settings)
}, show:function(params) {
}, hide:function() {
}, destroy:function() {
  for(var key in this.settings) {
    delete this.settings[key]
  }
  delete this.settings
}});
var PageLoader = Loader.subClass({init:function(settings) {
  this._super(settings)
}, createHtmlElements:function() {
  var loader = $.it.toolbox.getTemplate("loader/page-loader.html", "html", true);
  var newId = $.it.toolbox.sequentialId(loader.attr("id"));
  loader.attr("id", newId);
  $("body").append(loader);
  this.html = {};
  this.html.loader = $("#" + newId);
  this.html.container = this.html.loader.find(".container");
  this.html.spinnerContainer = this.html.container.find(".spinner-container");
  var width = $(window).width();
  var height = $(window).height();
  this.html.container.css("width", width + "px");
  this.html.container.css("height", height + "px");
  if(this.settings.showLoadingMsg === false) {
    this.html.container.find(".title").hide()
  }
  if(this.settings.showCancelMsg) {
    this.html.container.find(".message").show()
  }
}, touchMoveCallback:function(event) {
  return false
}, show:function(params) {
  this._super(params);
  if(!this.html) {
    this.createHtmlElements()
  }
  var that = this;
  var inputsInPage = $("input[type=text]:focus, input[type=password]:focus", $.mobile.activePage);
  if(inputsInPage && inputsInPage.length) {
    inputsInPage.blur()
  }
  var scrollTop = $(window).scrollTop();
  $.mobile.silentScroll(scrollTop);
  if(this.settings && this.settings.beforeShowHandler) {
    that.settings.beforeShowHandler(this.html.loader, params)
  }
  var realShow = function() {
    if(that.settings && that.settings.clickHandler) {
      that.html.spinnerContainer.one("tap", function(event) {
        return that.settings.clickHandler(event, params)
      })
    }
    if(that.settings && that.settings.backButtonHandler) {
      $(document).on("backbutton", function(event) {
        return that.settings.backButtonHandler(event, params)
      })
    }
    that.html.loader.show();
    $(document).on("touchmove", that.touchMoveCallback)
  };
  setTimeout(realShow, 100)
}, hide:function() {
  this._super();
  if(this.settings && this.settings.beforeHideHandler) {
    this.settings.beforeHideHandler(this.html.loader)
  }
  $(document).off("touchmove", this.touchMoveCallback);
  this.html.loader.hide()
}, destroy:function() {
  this._super();
  this.html.loader.remove();
  for(var key in this.html) {
    delete this.html[key]
  }
  delete this.html
}});
var AjaxLoader = Loader.subClass({init:function(settings) {
  var cancelAction = function(ajaxSettings) {
    if(ajaxSettings.isCancelable && ajaxSettings.cancel) {
      ajaxSettings.cancel()
    }
  };
  this.settings = this.settings || {};
  this.data = this.data || {};
  this.settings.defaultPageLoaderSettings = {beforeShowHandler:function(el$, ajaxSettings) {
    console.log("loader before show");
    if(ajaxSettings.isCancelable) {
      el$.find(".message").removeClass("hidden")
    }else {
      el$.find(".message").addClass("hidden")
    }
  }, clickHandler:function(event, ajaxSettings) {
    console.log("loader click handler");
    cancelAction(ajaxSettings);
    return false
  }, backButtonHandler:function(event, ajaxSettings) {
    console.log("loader back button");
    cancelAction(ajaxSettings)
  }, beforeHideHandler:function(el$) {
    console.log("loader before hide")
  }};
  this.settings.defaultElementLoaderSettings = {showLoadingMsg:false};
  this._super(settings)
}, show:function(ajaxSettings) {
  if(!ajaxSettings || !ajaxSettings.enableAjaxLoader) {
    return
  }
  if(ajaxSettings.showAjaxLoaderOn) {
    this.data.elementLoaders = this.data.elementLoaders || {};
    var elt$ = $(ajaxSettings.showAjaxLoaderOn);
    if(!elt$.attr("id")) {
      elt$.attr("id", $.it.toolbox.sequentialId())
    }
    var newSettings = $.extend(true, {}, this.settings.defaultElementLoaderSettings, {element:elt$});
    var el = new ElementLoader(newSettings);
    this.data.elementLoaders[elt$.attr("id")] = el;
    el.show(ajaxSettings)
  }else {
    this.data.pageLoader = this.data.pageLoader || new PageLoader(this.settings.defaultPageLoaderSettings);
    this.data.pageLoader.show(ajaxSettings)
  }
}, hide:function(ajaxSettings) {
  if(!ajaxSettings || !ajaxSettings.enableAjaxLoader) {
    return
  }
  if(ajaxSettings.showAjaxLoaderOn) {
    var elt$ = $(ajaxSettings.showAjaxLoaderOn);
    var loader = this.data.elementLoaders[elt$.attr("id")];
    loader.hide();
    delete this.data.elementLoaders[elt$.attr("id")]
  }else {
    this.data.pageLoader.hide()
  }
}, destroy:function() {
  this._super();
  this.data.pageLoader.destroy();
  for(var key in this.data.elementLoaders) {
    this.data.elementLoaders[key].destroy()
  }
  for(key in this.data) {
    delete this.data[key]
  }
  delete this.data
}});
$.it.loader = $.it.loader || {};
$.it.loader.ajaxLoader = new AjaxLoader;
var ElementLoader = Loader.subClass({init:function(settings) {
  this._super(settings);
  if(!this.settings.element) {
    throw $.it.wordings.msg("mandatory-arguments", ["element"]);
  }
  if(!(this.settings.element instanceof jQuery)) {
    this.settings.element = $(this.settings.element)
  }
}, createHtmlElements:function() {
  var loader = $.it.toolbox.getTemplate("loader/element-loader.html", "html", true);
  var newId = $.it.toolbox.sequentialId(loader.attr("id"));
  loader.attr("id", newId);
  var container = loader.find(".container");
  loader.css("width", this.settings.element.outerWidth() + "px");
  loader.css("height", this.settings.element.outerHeight() + "px");
  loader.offset(this.settings.element.offset());
  container.css("width", this.settings.element.outerWidth() + "px");
  container.css("height", this.settings.element.outerHeight() + "px");
  container.css("border-radius", this.settings.element.css("border-radius"));
  if(this.settings.showLoadingMsg === false) {
    container.find(".title").hide()
  }
  $("body").append(loader);
  this.html = {};
  this.html.loader = $("#" + newId);
  this.html.container = this.html.loader.find(".container");
  this.html.spinnerContainer = this.html.container.find(".spinner-container")
}, show:function(params) {
  this._super(params);
  if(!this.html) {
    this.createHtmlElements()
  }
  var that = this;
  if(this.settings && this.settings.beforeShowHandler) {
    that.settings.beforeShowHandler(this.html.loader, params)
  }
  var realShow = function() {
    if(that.settings && that.settings.clickHandler) {
      that.html.spinnerContainer.one("tap", function(event) {
        return that.settings.clickHandler(event, params)
      })
    }
    if(that.settings && that.settings.backButtonHandler) {
      $(document).on("backbutton", function(event) {
        return that.settings.backButtonHandler(event, params)
      })
    }
    that.html.loader.show()
  };
  setTimeout(realShow, 100)
}, hide:function() {
  this._super();
  if(this.settings && this.settings.beforeHideHandler) {
    this.settings.beforeHideHandler(this.html.loader)
  }
  this.destroy()
}, destroy:function() {
  this._super();
  this.html.loader.remove();
  for(var key in this.html) {
    delete this.html[key]
  }
  delete this.html
}});
var Context = Object.subClass({});
$.it.context = new Context;
var AjaxSettings = {timeout:1E4, dataType:"json", cache:false, headers:{"cache-control":"no-cache"}, contentType:"application/x-www-form-urlencoded; charset=UTF-8", enableFileUrl:false, enableAjaxLoader:false, minAjaxLoaderDelay:500, connectivityError:true, isCancelable:false, beforeSend:function(xhr, mySettings) {
  if(!$.it.toolbox.networkAvailable() && !$.it.context.ajaxMock) {
    if(mySettings.connectivityError) {
      $.it.error.showConnectivityError()
    }
    var textStatus = "No Conectivity";
    var errorThrown = "The device is not connected to the internet, the request is aborted";
    if(mySettings.errorCallback) {
      var data = new Status(GenericStatus.NOK, textStatus, [], errorThrown);
      mySettings.errorCallback(data, xhr, textStatus, errorThrown)
    }
    return false
  }
  mySettings.startTime = (new Date).getTime();
  $.it.context.ajax.addToActiveRequests(mySettings);
  if(mySettings.enableAjaxLoader) {
    $.it.loader.ajaxLoader.show(mySettings)
  }
  mySettings.currentXHR = xhr;
  if(mySettings.beforeSendCallback) {
    mySettings.beforeSendCallback(xhr, mySettings)
  }
  return true
}, success:function(data, textStatus, xhr) {
  console.log("ajax success");
  var that = this;
  var next = function() {
    $.it.context.ajax.removeFromActiveRequests(that);
    if(that.enableAjaxLoader) {
      $.it.loader.ajaxLoader.hide(that)
    }
    that.successCallback(data, textStatus, xhr);
    that.completeCallback(data, xhr, textStatus)
  };
  var duration = (new Date).getTime() - this.startTime;
  console.log("Duree requete ajax : " + duration + "ms");
  if(duration >= this.minAjaxLoaderDelay) {
    next()
  }else {
    var timeout = setTimeout(next, this.minAjaxLoaderDelay - duration);
    this.timeoutForAlreadyReceivedResponse = timeout
  }
}, error:function(xhr, textStatus, errorThrown) {
  var data;
  try {
    data = JSON.parse(xhr.responseText)
  }catch(e) {
    data = new Status(xhr.status, xhr.responseText)
  }
  console.log("ajax error - textStatus: " + textStatus);
  console.log("ajax error - http code: " + xhr.status);
  console.log("ajax error - errorThrown: " + errorThrown);
  if(data && data.message) {
    console.log("ajax error - server message: " + data.message)
  }
  if(this.enableFileUrl && !this.crossDomain) {
    return
  }
  var that = this;
  var next = function() {
    $.it.context.ajax.removeFromActiveRequests(that);
    if(that.enableAjaxLoader) {
      $.it.loader.ajaxLoader.hide(that)
    }
    if(textStatus !== "abort") {
      that.errorCallback(data, xhr, textStatus, errorThrown);
      that.completeCallback(data, xhr, textStatus)
    }
  };
  var duration = (new Date).getTime() - this.startTime;
  console.log("Duree requete ajax : " + duration + "ms");
  if(duration >= this.minAjaxLoaderDelay) {
    next()
  }else {
    var timeout = setTimeout(next, this.minAjaxLoaderDelay - duration);
    this.timeoutForAlreadyReceivedResponse = timeout
  }
}, cancel:function() {
  console.log("ajax cancel");
  if(!this.isCancelable) {
    return false
  }
  $.it.context.ajax.removeFromActiveRequests(this);
  if(this.enableAjaxLoader) {
    $.it.loader.ajaxLoader.hide(this)
  }
  if(this.timeoutForAlreadyReceivedResponse) {
    clearTimeout(this.timeoutForAlreadyReceivedResponse);
    this.cancelCallback(true)
  }else {
    this.currentXHR.abort();
    this.cancelCallback(false);
    this.completeCallback(null, this.currentXHR, "cancel")
  }
}, complete:function(xhr, textStatus) {
}, successCallback:function(data, textStatus, xhr) {
}, errorCallback:function(data, xhr, textStatus, errorThrown) {
}, completeCallback:function(data, xhr, textStatus) {
}, cancelCallback:function(responseReceived) {
}};
var AjaxContext = Object.subClass({init:function() {
  this.activeRequests = {}
}, cancelAllActiveRequests:function() {
  for(var key in this.activeRequests) {
    this.activeRequests[key].cancel()
  }
}, addToActiveRequests:function(request) {
  this.activeRequests[request.startTime] = request
}, removeFromActiveRequests:function(request) {
  delete this.activeRequests[request.startTime]
}});
$.it.context.ajax = new AjaxContext;
var AjaxManager = Object.subClass({init:function(settings) {
  this.settings = $.extend(true, {}, AjaxSettings, settings)
}, call:function(settings) {
  console.log("Ajax: " + settings.url);
  var mergedSettings = $.extend(true, {}, this.settings, settings);
  return $.ajax(mergedSettings)
}});
$.it.ajax = new AjaxManager;
var PagesManager = Object.subClass({init:function() {
  this.pageHandlers = {};
  this.currentPageHandler = null;
  this.previousPageHandler = null
}, registerPageHandler:function(ph) {
  this.pageHandlers[ph.settings.ID] = ph
}, getPageHandler:function(id) {
  var ph = this.pageHandlers[id];
  if(!ph) {
    console.log("warning: no PageHandler for page '" + id + "'")
  }
  return ph
}, pageBeforeCreate:function(event, data) {
  var page = event.currentTarget;
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  this.previousPageHandler = this.currentPageHandler;
  this.currentPageHandler = ph;
  ph.pageBeforeCreate(event, data)
}, pageInit:function(event, data) {
  var page = event.currentTarget;
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  ph.pageInit(event, data)
}, pageCreate:function(event, data) {
  var page = event.currentTarget;
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  ph.pageCreate(event, data)
}, pageHide:function(event, data) {
  var page = event.currentTarget;
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  ph.pageHide(event, data)
}, pageRemove:function(event, data) {
  var page = event.currentTarget;
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  ph.pageRemove(event, data)
}, pageBeforeShow:function(event, data) {
  var page = event.currentTarget;
  var u = $.mobile.path.parseUrl(page.baseURI);
  if(u.search) {
    if(!data.options) {
      data.options = {}
    }
    if(!data.options.dataUrl) {
      data.options.dataUrl = u.hrefNoSearch
    }
    data.options.pageData = $.it.toolbox.getUrlParams(u.search)
  }
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  ph.pageBeforeShow(event, data)
}, pageBeforeChange:function(event, data) {
  var page = event.currentTarget;
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  ph.pageBeforeChange(event, data)
}, pageBeforeLoad:function(event, data) {
  var page = event.currentTarget;
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  ph.pageBeforeLoad(event, data)
}, pageShow:function(event, data) {
  var page = event.currentTarget;
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  ph.pageShow(event, data)
}, pageBeforeHide:function(event, data) {
  var page = event.currentTarget;
  var ph = this.getPageHandler(page.id);
  if(!ph) {
    return
  }
  ph.pageBeforeHide(event, data)
}, resume:function(event) {
  console.log("resuming application");
  if($.app.resume) {
    $.app.resume()
  }
  var ph = this.currentPageHandler;
  if(!ph) {
    return
  }
  ph.resume(event)
}, pause:function(event) {
  console.log("pausing application");
  if($.app.pause) {
    $.app.pause()
  }
  var ph = this.currentPageHandler;
  if(!ph) {
    return
  }
  ph.pause(event)
}, orientationChange:function(event) {
  console.log("orientation change");
  var ph = this.currentPageHandler;
  if(!ph) {
    return
  }
  ph.orientationChange(event)
}});
$.it.pagesManager = new PagesManager;
var pageSelector = "[data-role=page]";
$(document).on("pagebeforecreate", pageSelector, $.proxy($.it.pagesManager, "pageBeforeCreate"));
$(document).on("pageinit", pageSelector, $.proxy($.it.pagesManager, "pageInit"));
$(document).on("pagecreate", pageSelector, $.proxy($.it.pagesManager, "pageCreate"));
$(document).on("pagebeforechange", pageSelector, $.proxy($.it.pagesManager, "pageBeforeChange"));
$(document).on("pagebeforeload", pageSelector, $.proxy($.it.pagesManager, "pageBeforeLoad"));
$(document).on("pagebeforehide", pageSelector, $.proxy($.it.pagesManager, "pageBeforeHide"));
$(document).on("pagebeforeshow", pageSelector, $.proxy($.it.pagesManager, "pageBeforeShow"));
$(document).on("pageremove", pageSelector, $.proxy($.it.pagesManager, "pageRemove"));
$(document).on("pagehide", pageSelector, $.proxy($.it.pagesManager, "pageHide"));
$(document).on("pageshow", pageSelector, $.proxy($.it.pagesManager, "pageShow"));
$(document).on("resume", $.proxy($.it.pagesManager, "resume"));
$(document).on("pause", $.proxy($.it.pagesManager, "pause"));
$(document).on("orientationchange", $.proxy($.it.pagesManager, "orientationChange"));
var PageHandler = Object.subClass({init:function(settings) {
  this.settings = $.extend(true, {}, settings);
  this.html = {};
  this.data = {};
  $.it.pagesManager.registerPageHandler(this);
  console.log("new page handler with id '" + this.settings.ID + "'")
}, pageBeforeCreate:function(event, data) {
  console.log("page before create of '" + event.currentTarget.id + "'");
  var page = event.currentTarget;
  this.html.page = $(page);
  $.it.wordings.update(page);
  $.it.rimages.update(page)
}, pageInit:function(event, data) {
  console.log("page init of " + event.currentTarget.id);
  if(this.createHtmlElements) {
    this.createHtmlElements()
  }
  if(this.createDataElements) {
    this.createDataElements()
  }
}, pageCreate:function(event, data) {
  console.log("page create of '" + event.currentTarget.id + "'")
}, pageBeforeHide:function(event, data) {
  console.log("page before hide of '" + event.currentTarget.id + "'")
}, pageHide:function(event, data) {
  console.log("page hide of '" + event.currentTarget.id + "'")
}, pageBeforeShow:function(event, data) {
  console.log("page before show of '" + event.currentTarget.id + "'")
}, pageShow:function(event, data) {
  console.log("page show of '" + event.currentTarget.id + "'")
}, pageBeforeChange:function(event, data) {
  console.log("page before change of '" + event.currentTarget.id + "'")
}, pageBeforeLoad:function(event, data) {
  console.log("page before load of '" + event.currentTarget.id + "'")
}, pageRemove:function(event, data) {
  console.log("page remove of '" + event.currentTarget.id + "'");
  this.deleteHtmlElements();
  this.deleteDataElements()
}, deleteHtmlElements:function() {
  if(this.html) {
    for(var key in this.html) {
      delete this.html[key]
    }
  }
}, deleteDataElements:function() {
  if(this.data) {
    for(var key in this.data) {
      delete this.data[key]
    }
  }
}, resume:function(event) {
  console.log("resume on '" + this.settings.ID + "'")
}, pause:function(event) {
  console.log("pause on '" + this.settings.ID + "'")
}, orientationChange:function(event) {
  console.log("orientation change of '" + event.currentTarget.id + "'")
}});
var Urls = Object.subClass({init:function(settings) {
  this.defaultSettings = {network:{}, services:{}};
  this.settings = this.defaultSettings;
  this.extend(settings)
}, get:function(id, params) {
  if(!id) {
    return
  }
  if(!this.settings && !this.settings.services && !this.settings.services[id]) {
    return
  }
  var host = "";
  var value = this.settings.services[id];
  var url = "";
  if(value instanceof Object) {
    if(value && value.url) {
      if(value.network) {
        host = this.getHost(value.network)
      }
      url = value.url
    }
  }else {
    url = value
  }
  if(host === "" && this.settings.defaultNetwork && this.settings.defaultNetwork.host) {
    host = this.settings.defaultNetwork.host
  }
  var service = $.it.toolbox.fillParams(url, params);
  if($.it.context.ajaxMock) {
    service = service.replace(/\?/gi, "_")
  }
  return host + service
}, getHost:function(networkName) {
  if(networkName && this.settings && this.settings.network && this.settings.network[networkName]) {
    return this.settings.network[networkName].host
  }
}, getNetwork:function(networkName) {
  if(networkName && this.settings && this.settings.network && this.settings.network[networkName]) {
    return this.settings.network[networkName]
  }
}, extend:function(settings) {
  if(!settings) {
    return
  }
  this.settings = $.extend(true, {}, this.settings, settings);
  this.findDefaultNetwork()
}, findDefaultNetwork:function() {
  var nwk;
  if($.it.context.ajaxMock) {
    nwk = this.getNetwork("mock");
    if(nwk) {
      this.settings.defaultNetwork = nwk;
      return nwk
    }
  }
  for(var name in this.settings.network) {
    nwk = this.settings.network[name];
    if(nwk["default"]) {
      this.settings.defaultNetwork = nwk;
      return nwk
    }
  }
}, raw:function() {
  return $.it.toolbox.clone(this.settings)
}, enableAjaxMock:function() {
  this.urlsBackup = $.it.urls.raw();
  $.it.ajax.settings.enableFileUrl = true;
  $.it.context.ajaxMock = true;
  $.it.urls.extend({network:{"mock":{"host":"mock/"}}});
  $(document).trigger($.Event("ajaxmockon"))
}, disableAjaxMock:function() {
  $.it.ajax.settings.enableFileUrl = false;
  $.it.context.ajaxMock = false;
  $.it.urls.extend(this.urlsBackup);
  delete this.urlsBackup;
  $(document).trigger($.Event("ajaxmockoff"))
}, isAjaxMockEnabled:function() {
  return $.it.context.ajaxMock
}});
$.it.urls = new Urls;
var Configuration = Object.subClass({init:function() {
  this.defaultSettings = {};
  this.settings = this.defaultSettings
}, load:function() {
  var url = $.it.urls.get("config-load");
  var dfd = $.Deferred();
  if(url) {
    var self = this;
    $.it.ajax.call({url:url, connectivityError:false, type:"GET", async:false, isCancelable:false, successCallback:function(data, textStatus, xhr) {
      self.extend(data);
      dfd.resolve()
    }, errorCallback:function(data, xhr, textStatus, errorThrown) {
      var error = new Status(xhr.status, $.it.wordings.msg("config-load-error", [textStatus]));
      dfd.rejectWith(error)
    }})
  }else {
    var error = new Status(404, $.it.wordings.msg("config-load-invalid"));
    dfd.rejectWith(error)
  }
  return dfd.promise()
}, extend:function(newSettings) {
  if(newSettings) {
    this.settings = $.extend(true, {}, this.settings, newSettings);
    this.validate()
  }
}, validate:function() {
}, get:function(key) {
  if(!key) {
    return undefined
  }
  return this.settings[key]
}});
$.it.config = new Configuration;
var Geolocation = Object.subClass({init:function(settings) {
  this.defaults = {enableHighAccuracy:true, maximumAge:6E4, timeout:5E3};
  this.settings = $.extend(true, {}, this.defaults, settings)
}, updateSettings:function(settings) {
  this.settings = $.extend(true, {}, this.settings, settings)
}, getPosition:function(updateContext, settings) {
  var dfd = $.Deferred();
  var self = this;
  if(navigator.geolocation && navigator.geolocation.getCurrentPosition) {
    var onSuccess = function(position) {
      self.logPosition("GET", position);
      if(updateContext) {
        $.it.context.position = position
      }
      dfd.resolveWith(position)
    };
    var onError = function(positionError) {
      self.logPositionError("GET", positionError);
      dfd.rejectWith(positionError)
    };
    settings = $.extend(true, {}, this.settings, settings);
    navigator.geolocation.getCurrentPosition(onSuccess, onError, settings)
  }else {
    dfd.rejectWith(new Status(GenericStatus.NOK, $.it.wordings.msg("geolocation-api-missing")))
  }
  return dfd.promise()
}, checkAvailability:function(verbose) {
  var dfd = $.Deferred();
  var success = function(position) {
    dfd.resolve()
  };
  var error = function(positionError) {
    if(verbose) {
      if(positionError && positionError.code === 1) {
        $.it.toolbox.alert($.it.wordings.msg("geolocation-permission-denied"))
      }else {
        $.it.toolbox.alert($.it.wordings.msg("geolocation-position-unavailable"))
      }
    }
    dfd.reject()
  };
  this.getPosition().done(success).fail(error);
  return dfd.promise()
}, watchPosition:function(updateContext, settings) {
  if(this.watchId) {
    this.stopWatching()
  }
  var dfd = $.Deferred();
  var self = this;
  if(navigator.geolocation && navigator.geolocation.getCurrentPosition) {
    var onSuccess = function(position) {
      self.logPosition("WATCH", position);
      if(updateContext) {
        $.it.context.position = position
      }
      dfd.resolveWith(position)
    };
    var onError = function(positionError) {
      self.logPositionError("WATCH", positionError);
      dfd.rejectWith(positionError)
    };
    settings = $.extend(true, {}, this.settings, settings);
    self.watchId = navigator.geolocation.watchPosition(onSuccess, onError, settings)
  }else {
    dfd.rejectWith(new Status(GenericStatus.NOK, $.it.wordings.msg("geolocation-api-missing")))
  }
  return dfd.promise()
}, stopWatching:function() {
  if(!this.watchId) {
    return
  }
  if(navigator.geolocation && navigator.geolocation.clearWatch) {
    navigator.geolocation.clearWatch(this.watchId)
  }
}, logPositionError:function(prefix, positionError) {
  if(!positionError) {
    return
  }
  var codeStr = ["UNKNOWN", "PERMISSION_DENIED", "POSITION_UNAVAILABLE", "TIMEOUT"];
  var code = codeStr[0];
  if(positionError.code >= 1 && positionError.code <= 3) {
    code = codeStr[positionError.code]
  }
  if(prefix) {
    prefix = "[" + prefix + "] "
  }else {
    prefix = ""
  }
  console.log(prefix + "PositionError ==> code: " + code + ", message: " + positionError.message)
}, logPosition:function(prefix, position) {
  if(!position || !position.coords || !position.coords.latitude || !position.coords.longitude) {
    return
  }
  if(prefix) {
    prefix = "[" + prefix + "] "
  }else {
    prefix = ""
  }
  console.log(prefix + "Position ==> latitude: " + position.coords.latitude + ", longitude: " + position.coords.longitude)
}});
$.it.geo = new Geolocation;
$.app.version = "1.0";
$.app.status = {INITIALIZED:0, NOT_INITIALIZED:1};
$.app.ready = function() {
  setTimeout(function() {
    if(!$.it.toolbox.isCordova()) {
      console.log("HTML5 webapp");
      $.app.init()
    }else {
      document.addEventListener("deviceready", $.app.init, false)
    }
  }, 100)
};
$.app.init = function() {
  $.app.setDefaultPageTransition();
  $.app.setCurrentLocale();
  if($.it.toolbox.isOldAndroid()) {
    $(document.body).addClass("old-android")
  }
  $.it.toolbox.handleTargetBlankUrls();
  var error;
  var initializationFailed = function() {
    if(!$.it.toolbox.networkAvailable()) {
      error = $.it.wordings.msg("connectivity-error")
    }else {
      error = $.it.wordings.msg("init-fatal-error")
    }
    console.log(error);
    $.it.context.appStatus = new Status($.app.status.NOT_INITIALIZED, error);
    $.app.splashscreenPH.hideLoaderIcon();
    if(navigator.splashscreen && navigator.splashscreen.hide) {
      navigator.splashscreen.hide()
    }
    if(!$.it.toolbox.networkAvailable()) {
      $.it.error.showConnectivityError()
    }else {
      $.it.error.showInitFatalError()
    }
  };
  var initializationDone = function() {
    $.it.context.appStatus = new Status($.app.status.INITIALIZED);
    $.app.splashscreenPH.hideSplashscreen();
    if(navigator.splashscreen && navigator.splashscreen.hide) {
      navigator.splashscreen.hide()
    }
    console.log("ready");
    $.mobile.initializePage()
  };
  $.when($.it.config.load(), $.it.wordings.load($.it.context.locale)).fail(initializationFailed).done(initializationDone)
};
$.app.setDefaultPageTransition = function() {
  if($.it.toolbox.isOldAndroid()) {
    $.mobile.defaultPageTransition = "none"
  }else {
    $.mobile.defaultPageTransition = "slide"
  }
};
$.app.setCurrentLocale = function() {
  var callback = function() {
  };
  $.it.toolbox.getCurrentLocale("en-US").done(callback).fail(callback)
};
$.app.resume = function() {
  if(!$.it.toolbox.isInitialized()) {
    $.app.init()
  }
};
$.app.useMock = function() {
  $(document).on("ajaxmockon", function() {
    console.log("mock on")
  });
  $(document).on("ajaxmockoff", function() {
    console.log("mock off")
  });
  $.it.urls.enableAjaxMock()
};
$.it.urls.extend({network:{"dev":{"host":"http://inmp.dev.itlabs.fr:8888/", "default":true}, "mock":{"host":"mock/"}, "recette":{"host":"your_host"}}, services:{"config-load":{url:"configuration.json", network:"mock"}, "wording-load":{url:"wordings.json", network:"mock"}, "votre-service":{url:"votre_url"}}});
$.it.wordings.extend({"app-name":"IT&L@bs", "other-page-title":"Other"});
var SplashscreenPH = PageHandler.subClass({init:function() {
  this._super({ID:"splashscreen-page", URL:"index.html"})
}, createHtmlElements:function() {
  this.html.loaderIcon = $("#loader-icon")
}, hideSplashscreen:function() {
  console.log("hide splashscreen");
  setTimeout(function() {
    $.mobile.changePage($.app.homePH.settings.URL, {transition:"fade"})
  }, 500)
}, hideLoaderIcon:function() {
  this.html.loaderIcon.hide()
}, pageHide:function(event, data) {
  console.log("removing splashscreen");
  this.html.page.remove()
}});
$.app.splashscreenPH = new SplashscreenPH;
var Menu = Object.subClass({init:function(page) {
  if(!page) {
    throw $.it.wordings.msg("mandatory-arguments", ["page"]);
  }
  this.html = {};
  this.html.page = $(page);
  this.load()
}, createHtmlElements:function() {
  this.html.menu = this.html.page.find("#menu")
}, open:function() {
  if(!this.html.menu) {
    this.load()
  }
  this.html.menu.panel("open")
}, close:function() {
  if(!this.html.menu) {
    this.load()
  }
  this.html.menu.panel("close")
}, load:function() {
  if(this.html.menu) {
    return
  }
  this.createHtmlElements();
  if(!this.html.menu) {
    throw"no menu found";
  }
  var menuContent = $.it.toolbox.getTemplate("menu/menu.html", "html", true);
  this.html.menu.append(menuContent);
  this.html.menu.trigger("updatelayout");
  var that = this;
  var itemSelectionCallback = function(event) {
    that.html.menu.panel("close")
  };
  this.html.menu.find("a").click(itemSelectionCallback)
}});
var HomePH = PageHandler.subClass({init:function() {
  this._super({ID:"home-page", URL:"home.html"});
  $.it.context.search = $.it.context.search || {point:{}}
}, pageInit:function(event, data) {
  this._super(event, data);
  this.data.menu = new Menu(this.html.page)
}, createHtmlElements:function() {
  this.html.pageContent = this.html.page.find(".page-content")
}, createDataElements:function() {
}});
$.app.homePH = new HomePH;
var OtherPH = PageHandler.subClass({init:function() {
  this._super({ID:"other-page", URL:"other.html"})
}, pageInit:function(event, data) {
  this._super(event, data)
}, createHtmlElements:function() {
}, createDataElements:function() {
}});
$.app.otherPH = new OtherPH;

